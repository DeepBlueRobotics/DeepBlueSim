/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // Support creating distributions archives
    id 'distribution'

    // Support WPILib
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
}

group 'org.carlmontrobotics'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // These dependencies are exported to consumers, that is to say found on their compile classpath.
    api wpi.java.deps.wpilib()

    // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
    implementation group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: wpi.versions.jacksonVersion.get()
    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: wpi.versions.jacksonVersion.get()
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: wpi.versions.jacksonVersion.get()

    implementation group: "org.ejml", name: "ejml-simple", version: wpi.versions.ejmlVersion.get()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

configurations {
    libdeepbluesimFolder {
        canBeConsumed = true
        canBeResolved = false
    }
}

distributions {
    libdeepbluesimFolder {
        distributionBaseName = "libdeepbluesim"
        contents {
            from(jar)
            from(sourcesJar)
            from(javadocJar)
        }
    }
}

libdeepbluesimFolderDistZip {
    // Force name, so it doesn't contain the version number.
    archiveFileName = "libdeepbluesim.zip"
}

artifacts {
    libdeepbluesimFolder(libdeepbluesimFolderDistZip)
}

