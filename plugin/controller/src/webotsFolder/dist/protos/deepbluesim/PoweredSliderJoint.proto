#VRML_SIM R2023b utf8
# license: MIT
# license url: https://github.com/DeepBlueRobotics/DeepBlueSim/blob/master/LICENSE.md
# template language: javascript
# A SliderJoint powered by a DeepBlueSim-compatible motor

EXTERNPROTO "DBSLinearMotorBase.proto"
EXTERNPROTO "PreconfiguredDBSLinearMotor.proto"

EXTERNPROTO "CANCoder.proto"
EXTERNPROTO "DBSQuadratureEncoder.proto"
EXTERNPROTO "REVBuiltinEncoder.proto"
EXTERNPROTO "SparkMaxAbsoluteEncoder.proto"
EXTERNPROTO "SparkMaxAlternateEncoder.proto"
EXTERNPROTO "SparkMaxAnalogSensor.proto"

EXTERNPROTO "DBSBrake.proto"

PROTO PoweredSliderJoint [
    field MFNode{
        DBSLinearMotorBase{}, PreconfiguredDBSLinearMotor{}
        CANCoder{}, DBSQuadratureEncoder{}, REVBuiltinEncoder{}, SparkMaxAbsoluteEncoder{}, SparkMaxAlternateEncoder{}, SparkMaxAnalogSensor{},
        DBSBrake{}
    } devices [PreconfiguredDBSLinearMotor{} REVBuiltinEncoder{} DBSBrake{}]
    field SFNode{Solid{}} endPoint Solid{}
    field SFNode{JointParameters{}} jointParameters JointParameters{}
]
{
    %<
        import {assert} from 'wbutility.js';
        let dbsutility = eval(wbfile.readTextFile(`${context.project_path}protos/deepbluesim/dbsutility.js`));
        dbsutility.assertValidPoweredJointDevices(fields.devices.value, "PoweredSliderJoint.devices", assert);
    >%
    SliderJoint {
        device IS devices
        endPoint IS endPoint
        jointParameters IS jointParameters
    }
}
