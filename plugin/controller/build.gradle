// Add repositories containing build plugins
buildscript {
  repositories {
    jcenter()
    google()
  }
}

// Apply other plugins
plugins {
    // Treat this project as a java application
    id "java"
    id "application"

    // Support creating distributions archives
    id 'distribution'

    // Support building a fat jar (aka shadowJar) containing needed dependencies
    id 'com.github.johnrengelman.shadow' version '8.1.1'

    // Support finding the local webots installation and adding it as a dependency
    id "org.carlmontrobotics.webots" version "1.0.0"

    // Support creating a license report of all dependencies
    id 'com.jaredsburrows.license' version '0.8.80'

    // Support WPILib
    id "edu.wpi.first.GradleRIO" version "2024.3.1"
    id 'edu.wpi.first.WpilibTools' version '1.3.0'
}

group 'org.team199'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// The name of the main class in the application jar.
mainClassName = 'DeepBlueSim'

wpilibTools.deps.wpilibVersion = wpi.versions.wpilibVersion.get()

def nativeConfigName = 'wpilibNatives'
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

nativeTasks.addToSourceSetResources(sourceSets.main)
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpimath")

// Add repositories containing project dependencies
repositories {
    // We need mavelLocal() because VSCode's Language Support for Java doesn't
    // currently handle dependencies in Gradle included builds. As a results, it
    // complains about being unable to resolve WPIWebSockets. The workaround is
    // to tell this project to use mavenLocal() so it can find it and run
    // "./gradlew :WPIWebSockets:publishToMavenLocal" to put it there. You will
    // then need to tell VSCode to "Java: Clean Language Server Workspace".
    mavenLocal()
    mavenCentral()
    jcenter()
}

// Add dependencies
dependencies {
    // See comment in repositories section if VSCode can't resolve WPIWebSockets.
    implementation 'org.carlmontrobotics:WPIWebSockets:unspecified'
    testImplementation 'junit:junit:4.13'

    implementation wpilibTools.deps.wpilibJava("wpimath")

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    implementation group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: wpi.versions.jacksonVersion.get()
    implementation group: "com.fasterxml.jackson.core", name: "jackson-core", version: wpi.versions.jacksonVersion.get()
    implementation group: "com.fasterxml.jackson.core", name: "jackson-databind", version: wpi.versions.jacksonVersion.get()

    implementation group: "org.ejml", name: "ejml-simple", version: wpi.versions.ejmlVersion.get()
}

// Configure the building of the fat jar
shadowJar {
    // Force name, so it doesn't contain the version number.
    archiveBaseName.set("DeepBlueSim") // DeepBlueSim.jar
    archiveClassifier.set('')
    archiveVersion.set('')

    // Make sure the licenseReport task runs first
    dependsOn "licenseReport"
    // dependsOn jar

    // Webots puts the correct version of its libs on the classpath before
    // launching the controller, so don't include them.
    exclude 'com/cyberbotics/**/*'

    // Remove anything that was required by something that was excluded
    minimize()

    // Include our license and the (renamed) license report
    from files("LICENSE.md", "$buildDir/reports/licenses/licenseReport.html")
    rename 'licenseReport.html', 'LICENSE-dependencies.html'
}

configurations {
    webotsFolder {
        canBeConsumed = true
        canBeResolved = false
    }
}

distributions {
    webotsFolder {
        distributionBaseName = "Webots"
        contents {
            from(shadowJar) {
              into 'controllers/DeepBlueSim'
            }
        }
    }
}

webotsFolderDistZip {
    // Force name, so it doesn't contain the version number.
    archiveFileName = "Webots.zip"
}

artifacts {
    webotsFolder(webotsFolderDistZip)
}
