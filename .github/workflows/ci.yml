name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v3
      with:
        submodules: "recursive"
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'gradle'

    - name: Setup Webots
      id: setupWebots
      uses: DeepBlueRobotics/setup-webots@v2
      with:
        webotsVersion: R2023b

    - name: Do the system test
      uses: ./.github/actions/run-system-test

    - name: Archive the example folder
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Resulting example project for ${{ runner.os }}
        path: example/

    - name: Archive Webots log
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: Webots log for ${{ runner.os }}
        path: webots-${{ runner.os }}.log

  publish:
    # Only release from the master branch
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Cancel any existing workflow runs
      uses: fkirc/skip-duplicate-actions@v5

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Setup Webots
      id: setupWebots
      uses: DeepBlueRobotics/setup-webots@versioning-and-caching
      with:
        webotsVersion: R2023b

    - name: Checkout source
      uses: actions/checkout@v3
      with:
        submodules: "recursive"
        fetch-depth: 0

    - name: Compute next semantic version
      id: version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        branch: "master"

    - name: Test with explicit version
      run: ./gradlew :plugin:build -Pversion=${{ steps.version.outputs.version }} --info --stacktrace

    - name: Tag
      run: git tag ${{ steps.version.outputs.version_tag }}

    - name: Push
      run: git push origin ${{ steps.version.outputs.version_tag }}

    - name: Publish to Gradle Plugin Portal
      env:
        GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
        GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
      run: ./gradlew :plugin:publishPlugins -Pversion=${{ steps.version.outputs.version }} -Pgradle.publish.key=$GRADLE_PUBLISH_KEY -Pgradle.publish.secret=$GRADLE_PUBLISH_SECRET --info --stacktrace
