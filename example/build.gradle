plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id "org.team199.deepbluesim" version "0.0.12"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'
}

// Enable simulation gui support (except during Continuous Integration).
// Must check the box in vscode to enable support upon debugging
if (System.getenv()['CI'] == null) {
    wpi.sim.addGui().defaultEnabled = true
    wpi.sim.addDriverstation()
}

wpi.sim.addWebsocketsServer()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Support a systemTest task that runs a system level functional test in the simulator

sourceSets {
    systemTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    systemTestImplementation.extendsFrom testImplementation
    systemTestRuntimeOnly.extendsFrom runtimeOnly    
}

task('systemTestJar', type: Jar) {
    archiveBaseName = 'systemTest'
    from sourceSets.main.output
    from sourceSets.systemTest.output
    from { configurations.systemTestRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest("frc.robot.SystemTestRobot")
}

// task('systemTest', type: SynchronousJavaSimulationTask) {
//     dependsOn 'systemTestJar'
//     dependsOn 'extractTestJNI'
// }

assemble.dependsOn installDeepBlueSim

// check.dependsOn 'systemTest'

// class SynchronousJavaSimulationTask extends edu.wpi.first.gradlerio.simulation.JavaSi mulationTask {
//     @Override
//     Process launch(List<String> cmd) {
//         // Let the base class handle these situations
//         if (scriptOnly || project.hasProperty('headless')) {
//             return super.launch(cmd)
//         }
//         // Remove the extraneous double quotes added by the caller
//         cmd = cmd*.replace('"','')
//         def builder = new ProcessBuilder(cmd)
//         // Incorporate the task's env and the simulation extension's env (e.g. HALSIM_EXTENSIONS)
//         def env = builder.environment()
//         env.putAll environment
//         env.putAll project.extensions.getByType(edu.wpi.first.gradlerio.wpi.simulation.SimulationExtension).environment
//         // Set the working dir if specified
//         if (workingDir != null) {
//             workingDir.mkdirs()
//             builder.directory(workingDir)
//         }
//         // Redirect stderr to stdout
//         builder.redirectErrorStream(true)
//         // Start the process
//         Process p = builder.start()
//         println "Waiting for simulation to finish..."
//         // Copy the output asynchronously so that the current thread can be interrupted
//         // (e.g. if the task times out)
//         try {
//             p.inputStream.withStream { stream ->
//                 def executor = java.util.concurrent.Executors.newFixedThreadPool(1)
//                 def copyStreamCallable = new java.util.concurrent.Callable<Integer>() {
//                     def buf = new byte[8192]
//                     @Override
//                     Integer call() {
//                         int length = stream.read(buf)
//                         if (length > 0) 
//                             System.out.write(buf, 0, length)
//                         return length
//                     }
//                 }
//                 while (executor.submit(copyStreamCallable).get() > 0) {
//                 }
//             }
//         } catch (InterruptedException) {
//             p.destroy()
//         }
//         p.waitFor()
//         if (p.exitValue() != 0)
//             throw new RuntimeException("Simulation failed with exit code ${p.exitValue()}.")
//         return p
//     }
// }

