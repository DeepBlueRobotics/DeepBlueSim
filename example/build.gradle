plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2023.4.3"
    id "org.team199.deepbluesim" version "0.0.12"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// repositories {
//     mavenLocal()
//     gradlePluginPortal()
//     String frcYear = '2023'
//     File frcHome
//     if (OperatingSystem.current().isWindows()) {
//         String publicFolder = System.getenv('PUBLIC')
//         if (publicFolder == null) {
//             publicFolder = "C:\\Users\\Public"
//         }
//         def homeRoot = new File(publicFolder, "wpilib")
//         frcHome = new File(homeRoot, frcYear)
//     } else {
//         def userFolder = System.getProperty("user.home")
//         def homeRoot = new File(userFolder, "wpilib")
//         frcHome = new File(homeRoot, frcYear)
//     }
//     def frcHomeMaven = new File(frcHome, 'maven')
//     maven {
//         name 'frcHome'
//         url frcHomeMaven
//     }
// }

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'
}

// Enable simulation gui support (except during Continuous Integration).
// Must check the box in vscode to enable support upon debugging
if (System.getenv()['CI'] == null) {
    wpi.sim.addGui().defaultEnabled = true
    wpi.sim.addDriverstation()
}

wpi.sim.addWebsocketsServer()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Support a systemTest task that runs a system level functional test in the simulator

sourceSets {
    systemTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    systemTestImplementation.extendsFrom testImplementation
    systemTestRuntimeOnly.extendsFrom runtimeOnly
}

task('systemTestJar', type: Jar) {
    archiveBaseName = 'systemTest'
    from sourceSets.main.output
    from sourceSets.systemTest.output
    from { configurations.systemTestRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest("frc.robot.SystemTestRobot")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

import org.gradle.internal.os.OperatingSystem
task('systemTest', type: JavaExec) { //edu.wpi.first.gradlerio.simulation.JavaExternalSimulationTask
    // Run the jar file
    dependsOn 'systemTestJar'
    // dependsOn 'simulateExternalJavaRelease'
    classpath = files(tasks.systemTestJar)
    // println(tasks.simulateExternalJavaRelease.getSimulationFile().getAsFile().get().getAbsolutePath())

    String pathSeparator = File.pathSeparator

    // Load native libraries
    dependsOn 'extractReleaseNative'
    String nativeDir = tasks.extractReleaseNative.getDestinationDirectory().getAsFile().get().getAbsolutePath()
    String defaultLibraryPath;
    if(OperatingSystem.current().isWindows()) {
        defaultLibraryPath = System.getenv('PATH')
    } else if(OperatingSystem.current().isMacOsX()) {
        defaultLibraryPath = System.getenv('DYLD_LIBRARY_PATH')
    } else {
        defaultLibraryPath = System.getenv('LD_LIBRARY_PATH')
    }
    jvmArgs '-Djava.library.path=' + defaultLibraryPath + pathSeparator + nativeDir
    environment 'PATH', System.getenv('PATH') + pathSeparator + nativeDir

    afterEvaluate { // We have to wait until after the project is evaluated so WPILibPlugin can setup the repositories to load the HALSim extensions from
        // Load HALSim extensions (See https://github.com/wpilibsuite/GradleRIO/blob/88f3420b1fe554d78b7b682e2adf2080c124ba42/src/main/java/edu/wpi/first/gradlerio/wpi/java/WPIJavaExtension.java#L139)
        File ldPath = tasks.extractReleaseNative.getDestinationDirectory().getAsFile().get()
        def simExtension = project.extensions.getByType(edu.wpi.first.gradlerio.wpi.WPIExtension).getSim()
        def halsimExtensions = simExtension.getHalSimLocations(List.of(ldPath), false)
        environment 'HALSIM_EXTENSIONS', halsimExtensions.stream().map { it.libName }.reduce { a, b -> a + pathSeparator + b }.get()
    }
}

assemble.dependsOn installDeepBlueSim

check.dependsOn 'systemTest'
